version: 2

sources:
  - name: jaffle_shop
    tables:
      - name: raw_customers

models:
  - name: stg_customers
    tests:
      - dbt_datamocktool.unit_test:
          input_mapping:
            source('jaffle_shop', 'raw_customers'): ref('dmt__raw_customers_1') # this is a seed
          expected_output: ref('dmt__expected_stg_customers_1') # this is also a seed
          compare_columns:
            - customer_id
            - first_name
            - last_name
      - dbt_datamocktool.unit_test:
          input_mapping:
            source('jaffle_shop', 'raw_customers'): "{{ dmt_raw_customers() }}" # this is a macro
          expected_output: ref('dmt__expected_stg_customers_2') # this is a model
          name: "Raw Customers 2"
          description: "This test is a unit test"
    columns:
      - name: customer_id
        tests:
          - unique
          - not_null

  - name: stg_orders
    tests:
      - dbt_datamocktool.unit_test:
          input_mapping:
            ref('raw_orders'): ref('dmt__raw_orders_1')
          expected_output: ref('dmt__expected_stg_orders_1')
      - dbt_datamocktool.unit_test_incremental:
          input_mapping:
            ref('raw_orders'): ref('dmt__raw_orders_3')
            this: ref('dmt__current_state_orders_2')
          expected_output: ref('dmt__expected_stg_orders_2')
    columns:
      - name: order_id
        tests:
          - unique
          - not_null
      - name: status
        tests:
          - accepted_values:
              values: ['placed', 'shipped', 'completed', 'return_pending', 'returned']

  - name: stg_payments
    columns:
      - name: payment_id
        tests:
          - unique
          - not_null
      - name: payment_method
        tests:
          - accepted_values:
              values: ['credit_card', 'coupon', 'bank_transfer', 'gift_card']
